name: Build Executables
on:
  push:
  workflow_dispatch:
jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            output_name: GOP3bot.exe
            asset_name: GOP3bot-windows.exe
          - os: macos-latest
            output_name: GOP3bot
            asset_name: GOP3bot-macos
          - os: ubuntu-latest
            output_name: GOP3bot
            asset_name: GOP3bot-linux
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies (Windows & macOS)
      if: matrix.os != 'ubuntu-latest'
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt
        
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        sudo apt-get update
        sudo apt-get install -y libxcb-xinerama0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xkb1 libxkbcommon-x11-0
        pip install -r requirements.txt
        
    - name: Install upx (Compression tool)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install upx
      
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: pyinstaller --onefile --windowed --name=GOP3bot main.py
      
    - name: Build executable (macOS)
      if: matrix.os == 'macos-latest'
      run: pyinstaller --onefile --windowed --name=GOP3bot main.py
      
    - name: Build executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: pyinstaller --onefile --name=GOP3bot main.py
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.output_name }}
        
    - name: Create Release
      if: github.ref_type == 'tag'
      uses: softprops/action-gh-release@v2
      with:
        files: dist/${{ matrix.output_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
